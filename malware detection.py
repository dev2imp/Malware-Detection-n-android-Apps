from tkinter import * #to create buttons
from datetime import datetime #to calculate time
started = datetime.now()

class dataset():
    def train_test_accuracy(self):
        import pandas as pd #to look at inside csv file
        from sklearn.neighbors import KNeighborsClassifier
        training_data = pd.read_csv('train_test.csv')#train data that contain 398 samples of goodware and malware.
        array=training_data.values#save the valuse of the trainin to an array.
        test_data=pd.read_csv('train_test.csv')#test data that contain 398 samples of goodware and malware.
        arrayTest=test_data.values#save the valuse of the trainin to an array.
        X_train=array[79:979,1:328]#all permmissions can be allowed. 329 permmissions
        y_train=array[79:979,0]#330 column tell us if the sample project is malware or goodware.
        X_test=arrayTest[1:78,1:328]#all permmissions can be allowed. 329 permmissions in test data
        y_test=arrayTest[1:78,0]#330 column tell us if the sample project is malware or goodware. in test data.

        knn = KNeighborsClassifier(n_neighbors=2)#classifier that chooses 20(the best accuracy) neighboors take closest one.
        knn.fit(X_train,y_train)#permissions are allowed and being malware or bening fits the data. teaching.
        print("started to predict")
        predictions = knn.predict(X_test)#permissions are given to the program. and it decide whater it is goodware or malware
        print(predictions)
            

        from sklearn.metrics import accuracy_score#to see how accurate was the predictions.
        print("accuracy::")
        print(accuracy_score(y_test,predictions))#y_test is the right data we check how many preditions were correct.
        ended = datetime.now()
        print("completed successfully in ",ended-started)
     

        
class interface():
    def __init__( self,datasetObj):
        master =Tk()
        master.title("anti-malware")
        master.geometry("400x600")#width*height define size of main windwow
        def scan():
            print("the scan result will show here")
            datasetObj.train_test_accuracy()
            
            
        scan=Button(master,text="SCAN",
                      command=scan,width=10,height=5,bg='yellow')
        scan.pack(padx=80,pady=40)#scan- pad* location of button
        
        logout=Button(master,text="LOGOUT",#logout button
                       command=master.destroy,width=10,height=5,bg='green')
        logout.pack(padx=70,pady=0)#logout- pad* location of button
        mainloop()
datasetObj=dataset()

#line above an object. we need to send this object to interface class
#to connect with  dataset class from interfface.
interF=interface(datasetObj)
